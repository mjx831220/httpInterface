<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="vfh.httpInterface.dao.buildings.BuildingsPriceMapper" >
  <sql id="Base_Column_List" >
    id, nomal_price, discount_price, active_id, building_id, start_date, end_date, create_time, 
    update_time
  </sql>
    <select id="get" resultType="hashmap">
        SELECT 
          <include refid="Base_Column_List" />
        FROM
          tb_building_price
        WHERE 
          id = #{id}
   </select>
   <delete id="delete" >
    delete from tb_building_price
    where id = #{id}
  </delete>
  <insert id="insert" useGeneratedKeys="true" keyProperty="entity.id" >
    insert into tb_building_price ( nomal_price, discount_price, 
    active_id, building_id, 
    start_date, end_date, create_time)
    values ( #{entity.nomalPrice}, #{entity.discountPrice}, 
      #{entity.activeId}, #{entity.buildingId}, 
      #{entity.startDate}, #{entity.endDate}, now()
      )
  </insert>
  <select id="count" resultType="long">
    select count(*) from tb_building_price
     WHERE
          id>0
        <if test="filter.username != null and filter.username != ''">
          <bind name="filter.username" value=" '%' + filter.username + '%' " />
          AND username LIKE #{filter.username}
        </if>

        <if test="filter.nickname != null and filter.nickname != ''">
          <bind name="filter.nickname" value=" '%' + filter.nickname + '%' " />
          AND nickname LIKE #{filter.nickname}
        </if>

        <if test="filter.state != null and filter.state != ''">
          AND state = #{filter.state}
        </if>

        <if test="filter.email != null and filter.email != ''">
          <bind name="filter.email" value=" '%' + filter.email + '%' " />
          AND email LIKE #{filter.email}
        </if>
  </select>
  <update id="update">
        update tb_building_price
	    <set >
	      <if test="entity.nomalPrice != null" >
	        nomal_price = #{entity.nomalPrice},
	      </if>
	      <if test="entity.discountPrice != null" >
	        discount_price = #{entity.discountPrice},
	      </if>
	      <if test="entity.activeId != null" >
	        active_id = #{entity.activeId},
	      </if>
	      <if test="entity.startDate != null" >
	        start_date = #{entity.startDate},
	      </if>
	      <if test="entity.endDate != null" >
	        end_date = #{entity.endDate},
	      </if>
	        update_time = now(),

	    </set>
        WHERE
          id = #{entity.id}
    </update>
    <select id="find" resultType="hashmap">
        SELECT
           a.id, a.nomal_price, a.discount_price,a.active_id, a.building_id, a.start_date, a.end_date, a.create_time, 
    		a.update_time,b.active_name
        FROM
          tb_building_price a left join tb_building_active b on a.active_id=b.id
        WHERE
          a.id>0
        <if test="filter.buildingId != null and filter.buildingId != ''">
            AND a.building_id = #{filter.buildingId}
        </if>

        <if test="filter.activeId != null and filter.activeId != ''">
            AND a.active_id = #{filter.activeId}
        </if>
		<if test="filter.endDate != null and filter.endDate != ''">
            AND a.end_date = #{filter.endDate}
        </if>
        ORDER BY a.id DESC
        <if test="filter.first != null and filter.last != null">
            LIMIT #{filter.first},#{filter.last}
        </if>
    </select>
</mapper>